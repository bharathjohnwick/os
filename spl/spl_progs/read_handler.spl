[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 9] = 5;

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16 ) + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

// syscallno, arg1, arg2, arg3, return val, IP

alias physicalPageNum R1;
alias offset R2;
alias logicalPageNum R3;
alias fileDes R4;
alias returnLocation R5;
alias returnVal R6;
alias arg2 R7;

// return
logicalPageNum = (userSP-1)/512;
offset = (userSP-1)%512;
physicalPageNum = [PTBR + logicalPageNum*2];
returnLocation = 512 * physicalPageNum + offset;

// arg1
logicalPageNum = (userSP-4)/512;
offset = (userSP- 4)%512;
physicalPageNum = [PTBR + logicalPageNum*2];
fileDes = [physicalPageNum * 512 + offset];

if (fileDes != -1) then
	returnVal = -1;
else
	// arg2
	logicalPageNum = (userSP-3)/512;
	offset = (userSP-3)%512;
	physicalPageNum = [PTBR + logicalPageNum*2];
	arg2 = [physicalPageNum * 512 + offset];

	multipush(R0, R1, R2, R3, R4, R5, R6, R7);
	R1 = TERMINAL_READ;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = arg2;
	call MOD_4;
	multipop(R0, R1, R2, R3, R4, R5, R6, R7);

	returnVal = 0;
endif;

[returnLocation] = returnVal;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;
