alias func_num R1;
alias cur_pid R2;

if (func_num == FREE_USER_AREA_PAGE) then
	alias uap R3;

	uap = [PROCESS_TABLE + 16*cur_pid + 11];

	multipush(R0, R1, R2, R3);
	R1 = RELEASE_PAGE;
	R2 = uap;
	call MOD_2;
	multipop(R0, R1, R2, R3);
	return;
endif;
if (func_num == EXIT_PROCESS) then
	multipush(R2);
	func_num = FREE_PAGE_TABLE;
	call MOD_1;
	multipop(R2);

	multipush(R2);
	func_num = FREE_USER_AREA_PAGE;
	call MOD_1;
	multipop(R2);

	[PROCESS_TABLE + 16*cur_pid + 4] = TERMINATED;
	return;
endif;
if (func_num == FREE_PAGE_TABLE) then
	alias i R9;
	alias ptb R10;
	ptb = [PROCESS_TABLE + 16*cur_pid + 14];

	[ptb] = -1;
	[ptb+1] = "0000";
	[ptb+2] = -1;
	[ptb+3] = "0000";

	alias dmt R11;
	dmt = DISK_MAP_TABLE + 10*cur_pid;
	R7 = cur_pid;
	if ([dmt + 2] != -1) then
		multipush(R2, R3, R9, R10, R11);
		R1 = RELEASE_BLOCK;
		R2 = [dmt + 2];
		R3 = R7;
		multipop(R2, R3, R9, R10, R11);
	endif;

	if ([dmt + 3] != -1) then
		multipush(R2, R3, R9, R10, R11);
		R1 = RELEASE_BLOCK;
		R2 = [dmt + 3];
		R3 = R7;
		multipop(R2, R3, R9, R10, R11);
	endif;

	if ([dmt + 8] != -1) then
		multipush(R2, R3, R9, R10, R11);
		R1 = RELEASE_BLOCK;
		R2 = [dmt + 8];
		R3 = R7;
		multipop(R2, R3, R9, R10, R11);
	endif;
	if ([dmt + 9] != -1) then
		multipush(R2, R3, R9, R10, R11);
		R1 = RELEASE_BLOCK;
		R2 = [dmt + 9];
		R3 = R7;
		multipop(R2, R3, R9, R10, R11);
	endif;

	i = 2;
	while (i < 10) do
		if ([ptb + 2*i] != -1) then
			multipush(R2, R3, R9, R10, R11);
			R1 = RELEASE_PAGE;
			R2 = [ptb + 2*i];
			multipop(R2, R3, R9, R10, R11);
		endif;
		[dmt + i] = -1;
		[ptb + 2*i] = -1;
		[ptb + 2*i + 1] = "0000";
		i = i + 1;
	endwhile;
	return;
endif;
if (func_num == GET_PCB_ENTRY) then
	alias pid R5;
	pid = 0;
	while (pid < MAX_PROC_NUM) do
		if ([PROCESS_TABLE + pid*16 + 4] == TERMINATED) then
			[PROCESS_TABLE + pid*16 + 4] = ALLOCATED;
			[PROCESS_TABLE + pid*16 + 14] = PAGE_TABLE_BASE + 20*pid;
			[PROCESS_TABLE + pid*16 + 15] = 10;
			[PROCESS_TABLE + pid*16 + 1] = pid;
			R0 = pid;
			return;
		endif;
		pid = pid + 1;
	endwhile;
	R0 = -1;
	return;
endif;

breakpoint;
R0 = 1;
return;
