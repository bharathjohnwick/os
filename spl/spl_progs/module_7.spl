// library
loadi(63, 13);
loadi(64, 14);

// init
loadi(65, 7);
loadi(66, 8);

// module 5
loadi(50, 63);
loadi(51, 64);

// module 0
loadi(40, 53);
loadi(41, 54);

// module 4
loadi(48, 61);
loadi(49, 62);

// timer handler
loadi(4, 17);
loadi(5, 18);

// exit handler
loadi(22, 35);
loadi(23, 36);

// exhandler
loadi(2, 15);
loadi(3, 16);

// int7
loadi(16, 29);
loadi(17, 30);


print "loaded handlers,lib";

alias i R0;
i = 0;
while (i < MAX_PROC_NUM) do
	[PROCESS_TABLE + 16*i + 4] = TERMINATED;
	[PROCESS_TABLE + 16*i + 0] = 0;
	i = i + 1;
endwhile;

// init proc
[PROCESS_TABLE + 16 + 1] = 1;					// PID
[PROCESS_TABLE + 16 + 11] = 80;					// User Area Page
[PROCESS_TABLE + 16 + 13] = 8*512; 				// UPTR
[PROCESS_TABLE + 16 + 12] = 0;					// KPTR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE+20;	// PTBR
[PROCESS_TABLE + 16 + 15] = 10;					// PTLR
[PROCESS_TABLE + 16 + 4] = CREATED;				// Status

// user proc 1
[PROCESS_TABLE + 32 + 1] = 2;		// PID
[PROCESS_TABLE + 32 + 11] = 89;		// User Area Page
[PROCESS_TABLE + 32 + 13] = 8*512; 	// UPTR
[PROCESS_TABLE + 32 + 12] = 0;		// KPTR
[PROCESS_TABLE + 32 + 14] = PAGE_TABLE_BASE+40;	// PTBR
[PROCESS_TABLE + 32 + 15] = 10;				// PTLR
[PROCESS_TABLE + 32 + 4] = CREATED;

// user proc 2
[PROCESS_TABLE + 48 + 1] = 3;		// PID
[PROCESS_TABLE + 48 + 11] = 95;		// User Area Page
[PROCESS_TABLE + 48 + 13] = 8*512; 	// UPTR
[PROCESS_TABLE + 48 + 12] = 0;		// KPTR
[PROCESS_TABLE + 48 + 14] = PAGE_TABLE_BASE+60;	// PTBR
[PROCESS_TABLE + 48 + 15] = 10;				// PTLR
[PROCESS_TABLE + 48 + 4] = TERMINATED;

// Pagetab for user proc 1

loadi(86, 69);
PTBR = PAGE_TABLE_BASE+40;
PTLR=10;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 84;
[PTBR+5] = "0110";
[PTBR+6] = 85;
[PTBR+7] = "0110";
//code
[PTBR+8] = 86;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 87;
[PTBR+17] = "0110";
[PTBR+18] = 88;
[PTBR+19] = "0110";

// start address
[87*512] = [86*512 + 1];
// user area stacK: pg 89

// Pagetab for user proc 2

loadi(90, 70);
PTBR = PAGE_TABLE_BASE+60;
PTLR=10;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 91;
[PTBR+5] = "0110";
[PTBR+6] = 92;
[PTBR+7] = "0110";
//code
[PTBR+8] = 90;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 93;
[PTBR+17] = "0110";
[PTBR+18] = 94;
[PTBR+19] = "0110";

// start address
[93*512] = [90*512 + 1];
// user area stacK: pg 95

// Pagetab for init proc

PTBR = PAGE_TABLE_BASE+20;
PTLR=10;

//stdlib
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// start address
[76*512] = [65*512 + 1];
// user area stacK: pg 89

return;
