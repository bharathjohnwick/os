
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1])*16 + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1])*16 + 11] * 512 - 1;

backup;

multipush(R0, R1);
alias func_num R1;
alias cur_pid R2;
alias msg R3;

func_num = 3;
cur_pid = [SYSTEM_STATUS_TABLE + 1];
msg = "timer";

call MOD_4;

multipop(R0, R1);

alias current_pid R0;
alias ptab_addr R1;

current_pid = [SYSTEM_STATUS_TABLE + 1];
ptab_addr = PROCESS_TABLE + current_pid*16;

// [ptab_addr + 12] = SP % 512;		// KPTR
// [ptab_addr + 14] = PTBR;
// [ptab_addr + 15] = PTLR;
[ptab_addr + 4]  = READY;

alias cur R2;
cur = 0;
while (cur < MAX_PROC_NUM) do
	if ([PROCESS_TABLE + current_pid*16 + 4] != TERMINATED) then
		[PROCESS_TABLE + current_pid*16] = [PROCESS_TABLE + current_pid*16] + 1;
	endif;
	cur = cur + 1;
endwhile;

// call scheduler module
call MOD_5;

restore;

SP = [([SYSTEM_STATUS_TABLE+1])*16 + PROCESS_TABLE +13];
[[SYSTEM_STATUS_TABLE+1]*16 + PROCESS_TABLE + 9] = 0;


ireturn;
